{
  "_from": "geth",
  "_id": "geth@0.4.0",
  "_inBundle": false,
  "_integrity": "sha1-m15CI4nOjiHgIBN2NBQkVQbtEeg=",
  "_location": "/geth",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "geth",
    "fetchSpec": "latest",
    "name": "geth",
    "raw": "geth",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/geth/-/geth-0.4.0.tgz",
  "_shasum": "9b5e422389ce8e21e02013763414245506ed11e8",
  "_spec": "geth",
  "_where": "/root/IdeaProjects/storage_smart_contract",
  "author": {
    "email": "jack@tinybike.net",
    "name": "Jack Peterson"
  },
  "bugs": {
    "url": "https://github.com/ethereumjs/geth.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Start and stop geth from Node.js",
  "devDependencies": {
    "async": "^1.5.0",
    "chai": "^3.4.0",
    "coveralls": "^2.11.4",
    "ethrpc": "^2.2.4",
    "istanbul": "^0.4.0",
    "mocha": "^2.3.3"
  },
  "homepage": "https://github.com/ethereumjs/geth.js#readme",
  "keywords": [
    "child process",
    "ethereum",
    "geth",
    "spawn"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "geth",
  "optionalDependencies": {},
  "readme": "geth.js\n=======\n\n[![Build Status](https://travis-ci.org/ethereumjs/geth.js.svg)](https://travis-ci.org/ethereumjs/geth.js)\n[![Coverage Status](https://coveralls.io/repos/ethereumjs/geth.js/badge.svg?branch=master&service=github)](https://coveralls.io/github/ethereumjs/geth.js?branch=master)\n[![npm version](https://badge.fury.io/js/geth.svg)](https://badge.fury.io/js/geth)\n\nStart and stop [geth](https://github.com/ethereum/go-ethereum) from Node.js.\n\nUsage\n-----\n\n```\n$ npm install geth\n```\nTo use geth.js, simply require it:\n```javascript\nvar geth = require(\"geth\");\n```\n\n### Starting and stopping geth\n\ngeth's `start` method accepts a configuration object, which uses the same flags as the geth command line client.  (Here, the flags are organized into an object.)  Flags that are not accompanied by a value on the command line (for example, `--mine`) should be passed in as `{ flag: null }`.\n```javascript\nvar options = {\n    networkid: \"10101\",\n    port: 30303,\n    rpcport: 8545,\n    mine: null\n};\n\ngeth.start(options, function (err, proc) {\n    if (err) return console.error(err);\n    // get your geth on!\n});\n```\nThe callback's parameter `proc` is the child process, which is also attached to the `geth` object (`geth.proc`) for your convenience.\n\nWhen you and geth have had enough lively times, `stop` kills the underlying geth process:\n```javascript\ngeth.stop(function () {\n    // no more lively times :( \n});\n```\n\n### Listeners\n\nThe callback for `start` fires after geth has successfully started.  Specifically, it looks for `\"IPC service started\"` in geth's stderr.  If you want to change the start callback trigger to something else, this can be done by replacing geth's default listeners.  `geth.start` accepts an optional second parameter which should specify the listeners to overwrite, for example:\n```javascript\n{\n    stdout: function (data) {\n        process.stdout.write(\"I got a message!! \" + data.toString());\n    },\n    stderr: function (data) {\n        if (data.toString().indexOf(\"Protocol Versions\") > -1) {\n            geth.trigger(null, geth.proc);\n        }\n    },\n    close: function (code) {\n        console.log(\"It's game over, man!  Game over!\");\n    }\n}\n```\nIn the above code, `geth.trigger` is the callback passed to `geth.start`.  (This callback is stored so that the startup trigger can be changed if needed.)  These three listeners (`stdout`, `stderr`, and `close`) are the only listeners which can be specified in this parameter, since only these three are set by default in `geth.start`.\n\nIf you want to swap out or add other listeners (after the initial startup), you can use the `geth.listen` convenience method:\n```javascript\ngeth.listen(\"stdout\", \"data\", function (data) { process.stdout.write(data); });\n```\nThis example (re-)sets the \"data\" listener on stdout by setting `geth.proc.stdout._events.data = function (data) { process.stdout.write(data); }`.\n\nTests\n-----\n\ngeth.js's tests use [ethrpc](https://github.com/AugurProject/ethrpc) to send some basic requests to geth.\n```\n$ npm test\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereumjs/geth.js.git"
  },
  "scripts": {
    "lint": "jshint index.js",
    "test": "mocha"
  },
  "version": "0.4.0"
}
